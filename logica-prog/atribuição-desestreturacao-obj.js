// Objeto com vÃ¡rias propriedades
const usuario = {
  nome: 'JoÃ£o',
  idade: 32,
  endereco: {
    rua: 'Rua A',
    cidade: 'Rio de Janeiro'
  },
  profissao: 'Engenheiro'
};

// ğŸ”¹ 1. DesestruturaÃ§Ã£o simples
// Pegando valores com o mesmo nome das chaves do objeto
const { nome, idade } = usuario;
console.log(nome);  // JoÃ£o
console.log(idade); // 32

// ğŸ”¹ 2. Renomeando variÃ¡veis
// Pegando a chave 'profissao' e renomeando para 'ocupacao'
const { profissao: ocupacao } = usuario;
console.log(ocupacao); // Engenheiro

// ğŸ”¹ 3. Valor padrÃ£o (caso a chave nÃ£o exista no objeto)
// Aqui 'telefone' nÃ£o existe, entÃ£o usamos um valor padrÃ£o
const { telefone = 'Sem telefone' } = usuario;
console.log(telefone); // Sem telefone

// ğŸ”¹ 4. DesestruturaÃ§Ã£o de objeto aninhado
// Acessando 'cidade' que estÃ¡ dentro do objeto 'endereco'
const { endereco: { cidade } } = usuario;
console.log(cidade); // Rio de Janeiro

// ğŸ”¹ 5. Usando desestruturaÃ§Ã£o como parÃ¢metro de funÃ§Ã£o
function exibirUsuario({ nome, idade }) {
  console.log(`UsuÃ¡rio: ${nome}, Idade: ${idade}`);
}
exibirUsuario(usuario); // UsuÃ¡rio: JoÃ£o, Idade: 32

// ğŸ”¹ 6. Usando nome diferente SEM renomear (erro comum)
const { nomeCompleto } = usuario;
console.log(nomeCompleto); // undefined â€” 'nomeCompleto' nÃ£o existe no objeto

// ğŸ”¹ 7. Forma CORRETA de usar nome diferente (com renomeaÃ§Ã£o)
const { nome: nomeUsuario } = usuario;
console.log(nomeUsuario); // JoÃ£o

//tbm Ã© possivel usar ...rest