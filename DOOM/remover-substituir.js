(function() {
  // ============================================================
  // üìò RESUMO: REMOVENDO E SUBSTITUINDO ELEMENTOS NO DOM
  // ============================================================
  // - remove()        ‚Üí apaga um elemento diretamente
  // - removeChild()   ‚Üí apaga um filho espec√≠fico de um elemento pai
  // - replaceChild()  ‚Üí troca um filho existente por outro elemento novo
  //
  // OBS: todos atuam sobre elementos j√° existentes no DOM (na tela)
  // ============================================================

  const elementoPai = document.querySelector(".hero");

  // ------------------------------------------------------------
  // üü¢ 1) Criando tr√™s elementos s√≥ pra fazer os testes
  // ------------------------------------------------------------
  const divA = document.createElement("div");
  divA.textContent = "Elemento A (ser√° removido com remove())";
  divA.style.background = "#e91e63";
  divA.style.color = "white";
  divA.style.padding = "10px";
  divA.style.marginBottom = "5px";

  const divB = document.createElement("div");
  divB.textContent = "Elemento B (ser√° removido com removeChild())";
  divB.style.background = "#9c27b0";
  divB.style.color = "white";
  divB.style.padding = "10px";
  divB.style.marginBottom = "5px";

  const divC = document.createElement("div");
  divC.textContent = "Elemento C (ser√° substitu√≠do)";
  divC.style.background = "#3f51b5";
  divC.style.color = "white";
  divC.style.padding = "10px";
  divC.style.marginBottom = "5px";

  elementoPai.append(divA, divB, divC);


  // ------------------------------------------------------------
  // üî¥ 2) remove() ‚Üí remove o pr√≥prio elemento
  // ------------------------------------------------------------
  // Remove o divA diretamente, sem precisar do pai
  divA.remove(); 
  // ‚Üí divA √© deletado da tela


  // ------------------------------------------------------------
  // üü° 3) removeChild() ‚Üí remove um filho espec√≠fico
  // ------------------------------------------------------------
  // Aqui o pai (elementoPai) precisa saber qual filho deletar
  elementoPai.removeChild(divB);
  // ‚Üí divB √© removido do DOM usando o pai


  // ------------------------------------------------------------
  // üîµ 4) replaceChild() ‚Üí substitui um filho por outro
  // ------------------------------------------------------------
  const novoElemento = document.createElement("div");
  novoElemento.textContent = "Elemento NOVO (substituiu o C)";
  novoElemento.style.background = "#4CAF50";
  novoElemento.style.color = "white";
  novoElemento.style.padding = "10px";

  // Substitui divC pelo novoElemento dentro do pai
  elementoPai.replaceChild(novoElemento, divC);
  // ‚Üí divC √© removido e o novoElemento entra no lugar

  // ------------------------------------------------------------
  // üí° DIFEREN√áAS R√ÅPIDAS
  // ------------------------------------------------------------
  // remove()        ‚Üí remove o pr√≥prio elemento
  // removeChild(el) ‚Üí remove um filho de um pai espec√≠fico
  // replaceChild(novo, antigo) ‚Üí troca um filho por outro
  // ------------------------------------------------------------

})();
